$date
	Thu Jul 10 20:17:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_RISC_V_CPU $end
$var reg 1 ! CLK $end
$var reg 1 " RESET $end
$scope module uut $end
$var wire 1 ! CLK $end
$var wire 2 # EX_W_REG [1:0] $end
$var wire 2 $ FDATA1SEL [1:0] $end
$var wire 2 % FDATA2SEL [1:0] $end
$var wire 2 & IF_W_REG [1:0] $end
$var wire 1 " RESET $end
$var wire 2 ' WB_W_REG [1:0] $end
$var wire 1 ( WB_REG_EN $end
$var wire 32 ) WB_PC [31:0] $end
$var wire 32 * WB_MEM_OUT [31:0] $end
$var wire 32 + WB_DATA [31:0] $end
$var wire 5 , WB_ADD [4:0] $end
$var wire 1 - STALL $end
$var wire 32 . PC_I_4 [31:0] $end
$var wire 32 / PC_I [31:0] $end
$var wire 32 0 MUX_OUT [31:0] $end
$var wire 2 1 MA_W_REG [1:0] $end
$var wire 32 2 MA_SIGN [31:0] $end
$var wire 1 3 MA_REG_EN $end
$var wire 32 4 MA_PC_4 [31:0] $end
$var wire 32 5 MA_PC [31:0] $end
$var wire 2 6 MA_MW [1:0] $end
$var wire 2 7 MA_MR [1:0] $end
$var wire 32 8 MA_MEM_OUT [31:0] $end
$var wire 32 9 MA_DATA [31:0] $end
$var wire 5 : MA_ADD [4:0] $end
$var wire 3 ; IMME_SELECT [2:0] $end
$var wire 32 < IF_SIGN [31:0] $end
$var wire 1 = IF_REG_EN $end
$var wire 32 > IF_PC [31:0] $end
$var wire 1 ? IF_OP2 $end
$var wire 1 @ IF_OP1 $end
$var wire 2 A IF_MW [1:0] $end
$var wire 2 B IF_MR [1:0] $end
$var wire 32 C IF_INSTR [31:0] $end
$var wire 32 D IF_D2 [31:0] $end
$var wire 32 E IF_D1 [31:0] $end
$var wire 3 F IF_BS [2:0] $end
$var wire 5 G IF_ALU [4:0] $end
$var wire 32 H IFD_INSTR [31:0] $end
$var wire 32 I ID_PC [31:0] $end
$var wire 32 J FDATA2 [31:0] $end
$var wire 32 K FDATA1 [31:0] $end
$var wire 32 L EX_SIGN [31:0] $end
$var wire 1 M EX_REG_EN $end
$var wire 32 N EX_PC [31:0] $end
$var wire 1 O EX_OP2 $end
$var wire 1 P EX_OP1 $end
$var wire 2 Q EX_MW [1:0] $end
$var wire 2 R EX_MR [1:0] $end
$var wire 32 S EX_DATA [31:0] $end
$var wire 32 T EX_D2 [31:0] $end
$var wire 32 U EX_D1 [31:0] $end
$var wire 3 V EX_BS [2:0] $end
$var wire 5 W EX_ALU [4:0] $end
$var wire 32 X EX_AL2 [31:0] $end
$var wire 32 Y EX_AL1 [31:0] $end
$var wire 5 Z EX_ADD [4:0] $end
$var wire 1 [ BUBBLE $end
$var wire 1 \ BR_SEL $end
$scope module PC $end
$var wire 1 ] BUSYWAIT $end
$var wire 1 ! CLOCK $end
$var wire 1 " RESET $end
$var wire 32 ^ PC [31:0] $end
$var reg 32 _ NEXTPC [31:0] $end
$upscope $end
$scope module adder1 $end
$var wire 32 ` DATA [31:0] $end
$var wire 32 a OUT [31:0] $end
$upscope $end
$scope module adder2 $end
$var wire 32 b OUT [31:0] $end
$var wire 32 c DATA [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 ! CLK $end
$var wire 1 " RESET $end
$var wire 5 d SELECT [4:0] $end
$var wire 32 e DATA2 [31:0] $end
$var wire 32 f DATA1 [31:0] $end
$var reg 32 g RESULT [31:0] $end
$upscope $end
$scope module branch $end
$var wire 3 h op [2:0] $end
$var wire 32 i data2 [31:0] $end
$var wire 32 j data1 [31:0] $end
$var wire 1 k BNE $end
$var wire 1 l BLTU $end
$var wire 1 m BLT $end
$var wire 1 n BGEU $end
$var wire 1 o BGE $end
$var wire 1 p BEQ $end
$var reg 1 \ out $end
$upscope $end
$scope module cu $end
$var wire 7 q OPCODE [6:0] $end
$var wire 32 r INSTRUCTION [31:0] $end
$var wire 7 s FUNCT7 [6:0] $end
$var wire 3 t FUNCT3 [2:0] $end
$var reg 5 u ALUOP [4:0] $end
$var reg 3 v BR_SEL [2:0] $end
$var reg 3 w IMME_SELECT [2:0] $end
$var reg 2 x MEM_READ [1:0] $end
$var reg 2 y MEM_WRITE [1:0] $end
$var reg 1 @ MUX1_SELECT $end
$var reg 1 ? MUX2_SELECT $end
$var reg 1 = WRITEENABLE $end
$upscope $end
$scope module ex_ma $end
$var wire 1 ! CLK $end
$var wire 32 z EX_DATA [31:0] $end
$var wire 2 { EX_W_REG [1:0] $end
$var wire 1 " RESET $end
$var wire 32 | EX_SIGN [31:0] $end
$var wire 1 M EX_REG_EN $end
$var wire 32 } EX_PC [31:0] $end
$var wire 2 ~ EX_MW [1:0] $end
$var wire 2 !" EX_MR [1:0] $end
$var wire 5 "" EX_ADD [4:0] $end
$var reg 5 #" MA_ADD [4:0] $end
$var reg 32 $" MA_DATA [31:0] $end
$var reg 2 %" MA_MR [1:0] $end
$var reg 2 &" MA_MW [1:0] $end
$var reg 32 '" MA_PC [31:0] $end
$var reg 1 3 MA_REG_EN $end
$var reg 32 (" MA_SIGN [31:0] $end
$var reg 2 )" MA_W_REG [1:0] $end
$upscope $end
$scope module hazard $end
$var wire 5 *" ADDR1 [4:0] $end
$var wire 5 +" ADDR2 [4:0] $end
$var wire 1 ," EXRD_EQ_ADDR1_EXRD $end
$var wire 1 -" EXRD_EQ_ADDR1_EXRD_MEMRD $end
$var wire 1 ." EXRD_EQ_ADDR1_MEMRD $end
$var wire 1 /" EXRD_EQ_ADDR2_EXRD $end
$var wire 1 0" EXRD_EQ_ADDR2_EXRD_MEMRD $end
$var wire 1 1" EXRD_EQ_ADDR2_MEMRD $end
$var wire 5 2" MEMRD [4:0] $end
$var wire 1 3" MEMRD_EQ_ADDR1_EXRD $end
$var wire 1 4" MEMRD_EQ_ADDR1_EXRD_MEMRD $end
$var wire 1 5" MEMRD_EQ_ADDR1_MEMRD $end
$var wire 1 6" MEMRD_EQ_ADDR2_EXRD $end
$var wire 1 7" MEMRD_EQ_ADDR2_EXRD_MEMRD $end
$var wire 1 8" MEMRD_EQ_ADDR2_MEMRD $end
$var wire 1 3 MEMWE $end
$var wire 1 9" MEMRD_EQ_MEMRD $end
$var wire 1 :" MEMRD_EQ_ADDR2 $end
$var wire 1 ;" MEMRD_EQ_ADDR1 $end
$var wire 1 M EXWE $end
$var wire 1 <" EXRD_EQ_MEMRD $end
$var wire 1 =" EXRD_EQ_EXRD $end
$var wire 1 >" EXRD_EQ_ADDR2 $end
$var wire 1 ?" EXRD_EQ_ADDR1 $end
$var wire 5 @" EXRD [4:0] $end
$var reg 1 [ BUBBLE $end
$var reg 2 A" EXMEMR [1:0] $end
$var reg 2 B" FDATA1SEL [1:0] $end
$var reg 2 C" FDATA2SEL [1:0] $end
$var reg 1 - STALL $end
$upscope $end
$scope module if_ex $end
$var wire 1 ! CLK $end
$var wire 5 D" IF_ADD [4:0] $end
$var wire 5 E" IF_ALU [4:0] $end
$var wire 3 F" IF_BS [2:0] $end
$var wire 2 G" IF_MR [1:0] $end
$var wire 2 H" IF_MW [1:0] $end
$var wire 1 @ IF_OP1 $end
$var wire 1 ? IF_OP2 $end
$var wire 1 = IF_REG_EN $end
$var wire 2 I" IF_W_REG [1:0] $end
$var wire 1 " RESET $end
$var wire 32 J" IF_SIGN [31:0] $end
$var wire 32 K" IF_PC [31:0] $end
$var wire 32 L" IF_D2 [31:0] $end
$var wire 32 M" IF_D1 [31:0] $end
$var reg 5 N" EX_ADD [4:0] $end
$var reg 5 O" EX_ALU [4:0] $end
$var reg 3 P" EX_BS [2:0] $end
$var reg 32 Q" EX_D1 [31:0] $end
$var reg 32 R" EX_D2 [31:0] $end
$var reg 2 S" EX_MR [1:0] $end
$var reg 2 T" EX_MW [1:0] $end
$var reg 1 P EX_OP1 $end
$var reg 1 O EX_OP2 $end
$var reg 32 U" EX_PC [31:0] $end
$var reg 1 M EX_REG_EN $end
$var reg 32 V" EX_SIGN [31:0] $end
$var reg 2 W" EX_W_REG [1:0] $end
$upscope $end
$scope module if_id $end
$var wire 1 ! CLK $end
$var wire 32 X" IF_PC [31:0] $end
$var wire 1 " RESET $end
$var wire 32 Y" IF_INSTR [31:0] $end
$var reg 32 Z" ID_INSTR [31:0] $end
$var reg 32 [" ID_PC [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 \" ADDR [31:0] $end
$var wire 1 ! CLK $end
$var wire 1 " RESET $end
$var reg 32 ]" INSTRUCTION [31:0] $end
$upscope $end
$scope module m3 $end
$var wire 32 ^" Input1 [31:0] $end
$var wire 32 _" Input2 [31:0] $end
$var wire 1 \ Select $end
$var reg 32 `" Answer [31:0] $end
$upscope $end
$scope module ma_wb $end
$var wire 1 ! CLK $end
$var wire 5 a" MA_ADD [4:0] $end
$var wire 32 b" MA_DATA [31:0] $end
$var wire 32 c" MA_PC [31:0] $end
$var wire 1 3 MA_REG_EN $end
$var wire 2 d" MA_W_REG [1:0] $end
$var wire 1 " RESET $end
$var wire 32 e" MA_MEM_OUT [31:0] $end
$var reg 5 f" WB_ADD [4:0] $end
$var reg 32 g" WB_DATA [31:0] $end
$var reg 32 h" WB_MEM_OUT [31:0] $end
$var reg 32 i" WB_PC [31:0] $end
$var reg 1 ( WB_REG_EN $end
$var reg 2 j" WB_W_REG [1:0] $end
$upscope $end
$scope module mx1 $end
$var wire 32 k" Input2 [31:0] $end
$var wire 1 P Select $end
$var wire 32 l" Input1 [31:0] $end
$var reg 32 m" Answer [31:0] $end
$upscope $end
$scope module mx2 $end
$var wire 32 n" Input2 [31:0] $end
$var wire 1 O Select $end
$var wire 32 o" Input1 [31:0] $end
$var reg 32 p" Answer [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 5 q" ADDR1 [4:0] $end
$var wire 5 r" ADDR2 [4:0] $end
$var wire 5 s" ADDRW [4:0] $end
$var wire 1 ! CLK $end
$var wire 32 t" OUT1 [31:0] $end
$var wire 32 u" OUT2 [31:0] $end
$var wire 1 " RESET $end
$var wire 1 ( WRITE $end
$var wire 32 v" IN [31:0] $end
$var integer 32 w" bit [31:0] $end
$upscope $end
$scope module rom $end
$var wire 32 x" ADDR [31:0] $end
$var wire 1 ! CLK $end
$var wire 32 y" DATA_IN [31:0] $end
$var wire 2 z" READ [1:0] $end
$var wire 1 " RESET $end
$var wire 2 {" WRITE [1:0] $end
$var reg 32 |" DATA_OUT [31:0] $end
$upscope $end
$scope module sign $end
$var wire 3 }" imm_sel [2:0] $end
$var wire 32 ~" inst [31:0] $end
$var wire 20 !# u_field [19:0] $end
$var wire 5 "# shamt_val [4:0] $end
$var wire 12 ## s_field [11:0] $end
$var wire 12 $# i_field [11:0] $end
$var parameter 3 %# B_TYPE $end
$var parameter 3 &# I_TYPE $end
$var parameter 3 '# J_TYPE $end
$var parameter 3 (# SHAMT $end
$var parameter 3 )# S_TYPE $end
$var parameter 3 *# U_TYPE $end
$var reg 32 +# imm_ext [31:0] $end
$upscope $end
$scope module tri_mux $end
$var wire 32 ,# Input1 [31:0] $end
$var wire 32 -# Input2 [31:0] $end
$var wire 32 .# Input3 [31:0] $end
$var wire 2 /# Select [1:0] $end
$var reg 32 0# Answer [31:0] $end
$upscope $end
$scope module tri_mux1 $end
$var wire 32 1# Input1 [31:0] $end
$var wire 32 2# Input2 [31:0] $end
$var wire 32 3# Input3 [31:0] $end
$var wire 2 4# Select [1:0] $end
$var reg 32 5# Answer [31:0] $end
$upscope $end
$scope module tri_mux2 $end
$var wire 32 6# Input1 [31:0] $end
$var wire 32 7# Input2 [31:0] $end
$var wire 32 8# Input3 [31:0] $end
$var wire 2 9# Select [1:0] $end
$var reg 32 :# Answer [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b0 *#
b100 )#
b101 (#
b1 '#
b10 &#
b11 %#
$end
#0
$dumpvars
b0 :#
bz 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
bx w"
b0 v"
bx u"
bx t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
bx c"
b0 b"
b0 a"
bx `"
b0 _"
bx ^"
bx ]"
bx \"
b0 ["
b0 Z"
bx Y"
bx X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
bx M"
bx L"
b0 K"
b0 J"
bz I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
bx A"
b0 @"
1?"
1>"
1="
1<"
1;"
1:"
19"
18"
17"
16"
15"
14"
13"
b0 2"
11"
10"
1/"
1."
1-"
1,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
bx {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
1p
1o
1n
0m
0l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
bx b
bx a
bx `
bx _
bx ^
0]
x\
0[
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
0P
0O
b0 N
0M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
bx E
bx D
bx C
b0 B
b0 A
0@
0?
bx >
0=
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
bx 4
03
b0 2
b0 1
b0 0
bx /
bx .
0-
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
bz &
bz %
b0 $
bx #
1"
0!
$end
#1000
b111000000000010000010011 C
b111000000000010000010011 Y"
b111000000000010000010011 ]"
b100 4
b100 b
b100 c"
b0 >
b0 _
b0 `
b0 X"
b0 \"
#2000
b0 /
b0 ^
b0 `"
b100 .
b100 a
b100 ^"
1\
#5000
1!
#6000
b100000 w"
#8000
b0 E
b0 M"
b0 t"
b0 D
b0 L"
b0 u"
#10000
0!
0"
#15000
b1000 <
b1000 J"
b1000 +#
b1 G
b1 u
b1 E"
1=
1?
b11 ;
b11 w
b11 }"
01"
06"
0/"
08"
00"
07"
b111000000000 !#
b1110 $#
b1000 ##
b1110 "#
b10011 q
b1000 D"
b1110 r"
0>"
0:"
b1110 +"
b100 0
b100 v"
b100 0#
b100 3#
b100 8#
b111000000000010000010011 H
b111000000000010000010011 r
b111000000000010000010011 Z"
b111000000000010000010011 ~"
bz W"
bx 1
bx )"
bx d"
b100 )
b100 i"
b100 ,#
1!
#20000
0!
#25000
04"
0-"
b0 0
b0 v"
b0 0#
b0 3#
b0 8#
b1000 /
b1000 ^
b1000 `"
b1000 S
b1000 g
b1000 z
b1000 _"
b1000 X
b1000 e
b1000 p"
0,"
03"
0."
bx '
bx j"
bx /#
1M
b1 W
b1 d
b1 O"
1O
0n
1l
0o
1m
1k
0p
b1000 L
b1000 i
b1000 |
b1000 V"
b1000 n"
1="
0<"
0?"
b1000 Z
b1000 ""
b1000 @"
b1000 N"
1!
#26000
b1000 >
b1000 _
b1000 `
b1000 X"
b1000 \"
#27000
b1100 /
b1100 ^
b1100 `"
b1100 .
b1100 a
b1100 ^"
0\
#30000
0!
#35000
05"
b1000 I
b1000 K"
b1000 ["
13
b1000 2
b1000 ("
b1000 y"
b1000 9
b1000 $"
b1000 b"
b1000 x"
b1000 2#
b1000 7#
0;"
1<"
19"
b1000 :
b1000 #"
b1000 2"
b1000 a"
1!
#36000
b1110000000000010100010011 C
b1110000000000010100010011 Y"
b1110000000000010100010011 ]"
b1100 >
b1100 _
b1100 `
b1100 X"
b1100 \"
#37000
b10000 /
b10000 ^
b10000 `"
b10000 .
b10000 a
b10000 ^"
#40000
0!
#45000
b1110000000000 !#
b11100 $#
b1010 ##
b11100 "#
b1010 D"
b11100 r"
b11100 +"
b1010 <
b1010 J"
b1010 +#
1(
b1000 +
b1000 g"
b1000 -#
b1000 ,
b1000 f"
b1000 s"
b1000 N
b1000 }
b1000 U"
b1000 k"
b1110000000000010100010011 H
b1110000000000010100010011 r
b1110000000000010100010011 Z"
b1110000000000010100010011 ~"
b1100 I
b1100 K"
b1100 ["
1!
#46000
b10100100000001100110011 C
b10100100000001100110011 Y"
b10100100000001100110011 ]"
b10000 >
b10000 _
b10000 `
b10000 X"
b10000 \"
#47000
b10100 /
b10100 ^
b10100 `"
b10100 .
b10100 a
b10100 ^"
#50000
0!
#55000
b1 G
b1 u
b1 E"
1=
0?
b0 ;
b0 w
b0 }"
b10100100000 !#
b101 $#
b110 ##
b101 "#
b110011 q
b110 D"
b101 r"
b100 q"
b101 +"
b100 *"
b10100100000000000000000 <
b10100100000000000000000 J"
b10100100000000000000000 +#
b1010 S
b1010 g
b1010 z
b1010 _"
b10100100000001100110011 H
b10100100000001100110011 r
b10100100000001100110011 Z"
b10100100000001100110011 ~"
b10000 I
b10000 K"
b10000 ["
b1010 X
b1010 e
b1010 p"
b1010 L
b1010 i
b1010 |
b1010 V"
b1010 n"
1="
0<"
b1010 Z
b1010 ""
b1010 @"
b1010 N"
b1100 N
b1100 }
b1100 U"
b1100 k"
b1000 5
b1000 c
b1000 '"
1!
#56000
b1100 4
b1100 b
b1100 c"
b10100 >
b10100 _
b10100 `
b10100 X"
b10100 \"
#57000
b11000 /
b11000 ^
b11000 `"
b11000 .
b11000 a
b11000 ^"
#60000
0!
#65000
b0 S
b0 g
b0 z
b0 _"
b1100 )
b1100 i"
b1100 ,#
b1010 2
b1010 ("
b1010 y"
b1010 9
b1010 $"
b1010 b"
b1010 x"
b1010 2#
b1010 7#
19"
b1010 :
b1010 #"
b1010 2"
b1010 a"
b1100 5
b1100 c
b1100 '"
0O
b0 X
b0 e
b0 p"
b10100100000000000000000 L
b10100100000000000000000 i
b10100100000000000000000 |
b10100100000000000000000 V"
b10100100000000000000000 n"
1="
b110 Z
b110 ""
b110 @"
b110 N"
b10000 N
b10000 }
b10000 U"
b10000 k"
b10100 I
b10100 K"
b10100 ["
1!
#66000
b10000 4
b10000 b
b10000 c"
b11000 >
b11000 _
b11000 `
b11000 X"
b11000 \"
#67000
b11100 /
b11100 ^
b11100 `"
b11100 .
b11100 a
b11100 ^"
#70000
0!
#75000
b11000 I
b11000 K"
b11000 ["
b10100 N
b10100 }
b10100 U"
b10100 k"
b10100100000000000000000 2
b10100100000000000000000 ("
b10100100000000000000000 y"
b0 9
b0 $"
b0 b"
b0 x"
b0 2#
b0 7#
1<"
19"
b110 :
b110 #"
b110 2"
b110 a"
b10000 5
b10000 c
b10000 '"
b1010 +
b1010 g"
b1010 -#
b1010 ,
b1010 f"
b1010 s"
b10000 )
b10000 i"
b10000 ,#
1!
#76000
b10100 4
b10100 b
b10100 c"
b11100 >
b11100 _
b11100 `
b11100 X"
b11100 \"
#77000
b100000 /
b100000 ^
b100000 `"
b100000 .
b100000 a
b100000 ^"
#80000
0!
#85000
b0 +
b0 g"
b0 -#
b110 ,
b110 f"
b110 s"
b10100 )
b10100 i"
b10100 ,#
b10100 5
b10100 c
b10100 '"
b11000 N
b11000 }
b11000 U"
b11000 k"
b11100 I
b11100 K"
b11100 ["
1!
#86000
b11000 4
b11000 b
b11000 c"
b100000 >
b100000 _
b100000 `
b100000 X"
b100000 \"
#87000
b100100 /
b100100 ^
b100100 `"
b100100 .
b100100 a
b100100 ^"
#90000
0!
#95000
b100000 I
b100000 K"
b100000 ["
b11100 N
b11100 }
b11100 U"
b11100 k"
b11000 5
b11000 c
b11000 '"
b11000 )
b11000 i"
b11000 ,#
1!
#96000
b11100 4
b11100 b
b11100 c"
b100100 >
b100100 _
b100100 `
b100100 X"
b100100 \"
#97000
b101000 /
b101000 ^
b101000 `"
b101000 .
b101000 a
b101000 ^"
#100000
0!
#105000
b11100 )
b11100 i"
b11100 ,#
b11100 5
b11100 c
b11100 '"
b100000 N
b100000 }
b100000 U"
b100000 k"
b100100 I
b100100 K"
b100100 ["
1!
#106000
b100000 4
b100000 b
b100000 c"
b101000 >
b101000 _
b101000 `
b101000 X"
b101000 \"
#107000
b101100 /
b101100 ^
b101100 `"
b101100 .
b101100 a
b101100 ^"
#110000
0!
